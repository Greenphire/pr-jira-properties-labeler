#!/bin/bash
set -e
set -o pipefail

# This is populated by our secret from the Workflow file.
if [[ -z "$GITHUB_TOKEN" ]]; then
	echo "Set the GITHUB_TOKEN env variable."
	exit 1
fi

# This one is populated by GitHub for free :)
if [[ -z "$GITHUB_REPOSITORY" ]]; then
	echo "Set the GITHUB_REPOSITORY env variable."
	exit 1
fi

URI_GITHUB=https://api.github.com
API_VERSION=v3
API_HEADER="Accept: application/vnd.github.${API_VERSION}+json"
AUTH_HEADER="Authorization: token ${GITHUB_TOKEN}"
REVIEWERS=(
    xserrat
    mcornella
)
labels_on_open_pull_request=("needs feedback")

ref=$(jq --raw-output .pull_request.head.ref "$GITHUB_EVENT_PATH")
owner=$(jq --raw-output .pull_request.head.repo.owner.login "$GITHUB_EVENT_PATH")
repo=$(jq --raw-output .pull_request.head.repo.name "$GITHUB_EVENT_PATH")

array_to_json_array() {
    local array=$1
    printf '%s\n' "${array[@]}" | jq -R . | jq -s .
}

add_labels() {
    echo $labels_on_open_pull_request
    local labels_to_add=$(array_to_json_array $labels_on_open_pull_request)
    echo "string labels: $labels_to_add"
    exit 0;

    curl -X POST \
    -H "${AUTH_HEADER}" \
    -H "${API_HEADER}" \
    -d "{\"labels\": ${labels_to_add}}" \
    "${URI_GITHUB}/repos/${owner}/${repo}/issues/${pr_number}/labels"
}

get_jira_priority_of() {
    local issue_code=$1
    curl -X GET \
    -H "Authorization: Basic ${JIRA_ENCODED_TOKEN}" \
    "${URI_JIRA}/rest/api/latest/issue/${issue_code}"| \
    jq --raw-output .fields.priority.name
}

main() {
    # In every runtime environment for an Action you have the GITHUB_EVENT_PATH
    # populated. This file holds the JSON data for the event that was triggered.
    # From that we can get the status of the pull request and if it was merged.
    # In this case we only care if it was closed and it was merged.
	action=$(jq --raw-output .action "$GITHUB_EVENT_PATH")
	merged=$(jq --raw-output .pull_request.merged "$GITHUB_EVENT_PATH")
	pr_number=$(jq --raw-output .number "$GITHUB_EVENT_PATH")

	echo "DEBUG -> action: $action merged: $merged pr_number: $pr_number"

#	if [[ "$merged" == "true" ]]; then
        # We only care about the closed event and if it was merged.
        # If so, delete the branch.
#		ref=$(jq --raw-output .pull_request.head.ref "$GITHUB_EVENT_PATH")
#		owner=$(jq --raw-output .pull_request.head.repo.owner.login "$GITHUB_EVENT_PATH")
#		repo=$(jq --raw-output .pull_request.head.repo.name "$GITHUB_EVENT_PATH")

#		if [[ "$ref" == "$default_branch" ]]; then
#			# Never delete the default branch.
#			echo "Will not delete default branch (${default_branch}) for ${owner}/${repo}, exiting."
#			exit 0
#		fi
#
#		echo "Deleting branch ref $ref for owner ${owner}/${repo}..."
#		curl -XDELETE -sSL \
#			-H "${AUTH_HEADER}" \
#			-H "${API_HEADER}" \
#			"${URI_GITHUB}/repos/${owner}/${repo}/git/refs/heads/${ref}"
#
#		echo "Branch delete success!"
#	fi

	if [[ "$action" == 'opened' ]]; then
	    local priority=$(get_jira_priority_of 'UVFT-3005')
	    echo "Priority: $priority"
	    labels_on_open_pull_request+=($priority)

	    echo "after add prio -> ${labels_on_open_pull_request[@]}"

	    add_labels
	fi
}

main "$@"